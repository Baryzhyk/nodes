#!/bin/bash

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ root
if [ "$EUID" -ne 0 ]; then
  echo "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –∑ –ø—Ä–∞–≤–∞–º–∏ root (sudo)"
  exit 1
fi

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–≥–æ—Ç–∏–ø—É
bash <(curl -s https://raw.githubusercontent.com/Baryzhyk/nodes/refs/heads/main/logo.sh)

# –ö–æ–ª—å–æ—Ä–∏
GREEN="\e[32m"
NC="\e[0m"

# --- –ê–Ω—ñ–º–∞—Ü—ñ—è ---
animate_loading() {
  for ((i = 1; i <= 5; i++)); do
    printf "\r${GREEN}–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–µ–Ω—é${NC}."
    sleep 0.3
    printf "\r${GREEN}–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–µ–Ω—é${NC}.."
    sleep 0.3
    printf "\r${GREEN}–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–µ–Ω—é${NC}..."
    sleep 0.3
    printf "\r${GREEN}–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–µ–Ω—é${NC}    "
    sleep 0.3
  done
  echo ""
}

# --- –§—É–Ω–∫—Ü—ñ—ó –¥—ñ–π ---
get_role_with_gswarm() {
  echo "=== [1/5] –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ ==="
  apt update && apt install -y wget curl nano

  echo "=== [2/5] –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Go 1.23.10 ==="
  cd /tmp
  wget -q https://go.dev/dl/go1.23.10.linux-amd64.tar.gz
  rm -rf /usr/local/go
  tar -C /usr/local -xzf go1.23.10.linux-amd64.tar.gz

  if ! grep -q '/usr/local/go/bin' ~/.bashrc; then
      echo 'export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin' >> ~/.bashrc
  fi
  export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin

  echo "–í–µ—Ä—Å—ñ—è Go:"
  go version

  echo "=== [3/5] –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ GSwarm ==="
  go install github.com/Deep-Commit/gswarm/cmd/gswarm@latest

  echo "gswarm –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: $(which gswarm)"

  echo "=== [4/5] –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ gswarm ==="
  gswarm --help || { echo '–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è gswarm!'; exit 2; }

  echo "=== [5/5] –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–∞–π—Å—Ç–µ—Ä –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ==="
  sleep 1
  gswarm
  echo "=== ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–ª—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! ==="
}

download_node() {
  echo 'üîß –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–¥–∏...'

  cd $HOME
  apt install -y lsof

  ports=(4040 42763)
  for port in "${ports[@]}"; do
    if lsof -i :"$port" &>/dev/null; then
      echo "‚ùå –ü–æ—Ä—Ç $port –∑–∞–π–Ω—è—Ç–∏–π."
      exit 1
    fi
  done

  echo "‚úÖ –ü–æ—Ä—Ç–∏ –≤—ñ–ª—å–Ω—ñ, —Ç—Ä–∏–≤–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è..."

  [ -d "$HOME/rl-swarm" ] && {
    PID=$(netstat -tulnp | grep :3000 | awk '{print $7}' | cut -d'/' -f1)
    kill "$PID" 2>/dev/null || true
    rm -rf rl-swarm/
  }

  TARGET_SWAP_GB=32
  CURRENT_SWAP_KB=$(free -k | awk '/Swap:/ {print $2}')
  CURRENT_SWAP_GB=$((CURRENT_SWAP_KB / 1024 / 1024))

  if [ "$CURRENT_SWAP_GB" -lt "$TARGET_SWAP_GB" ]; then
    swapoff -a
    sed -i '/swap/d' /etc/fstab
    fallocate -l ${TARGET_SWAP_GB}G /swapfile
    chmod 600 /swapfile
    mkswap /swapfile
    swapon /swapfile
    echo '/swapfile none swap sw 0 0' >> /etc/fstab
    echo "vm.swappiness = 10" >> /etc/sysctl.conf
    sysctl -p
  fi

  apt update -y && apt upgrade -y
  apt install -y git curl wget build-essential python3 python3-venv python3-pip screen yarn net-tools gnupg

  curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /usr/share/keyrings/yarnkey.gpg >/dev/null
  echo "deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
  curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
  apt update -y && apt install -y nodejs

  git clone https://github.com/gensyn-ai/rl-swarm
  cd rl-swarm
  python3 -m venv .venv
  source .venv/bin/activate
  pip install -r requirements-cpu.txt
  pip install --upgrade pip

  export PYTORCH_ENABLE_MPS_FALLBACK=1
  export PYTORCH_MPS_HIGH_WATERMARK_RATIO=0.0
  sed -i 's/torch\.device("mps" if torch\.backends\.mps\.is_available() else "cpu")/torch.device("cpu")/g' hivemind_exp/trainer/hivemind_grpo_trainer.py

  screen -S gensynnode -X quit 2>/dev/null || true
  echo '‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.'
}

launch_node() {
  cd $HOME/rl-swarm
  source .venv/bin/activate
  screen -S gensynnode -X quit 2>/dev/null || true
  screen -S gensynnode -d -m bash -c "trap '' INT; bash run_rl_swarm.sh 2>&1 | tee $HOME/rl-swarm/gensynnode.log"
  echo "üöÄ –ù–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É screen 'gensynnode'"
}

go_to_screen() {
  echo 'üì∫ –©–æ–± –≤–∏–π—Ç–∏ –∑ –ª–æ–≥—ñ–≤: CTRL + A, –ø–æ—Ç—ñ–º D'
  sleep 2
  screen -r gensynnode
}

userdata() {
  [ -f "$HOME/rl-swarm/modal-login/temp-data/userData.json" ] && cat "$HOME/rl-swarm/modal-login/temp-data/userData.json" || echo "–î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
}

update_node() {
  cd ~/rl-swarm
  git fetch origin
  git reset --hard origin/main
  git pull origin main
  echo 'üîÑ –ù–æ–¥–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞.'
}

delete_node() {
  screen -S gensynnode -X quit 2>/dev/null || true
  rm -rf ~/rl-swarm
  echo "üóëÔ∏è –ù–æ–¥–∞ –≤–∏–¥–∞–ª–µ–Ω–∞."
}

check_models() {
  echo "üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –º–æ–¥–µ–ª—ñ:"
  ls ~/rl-swarm/models 2>/dev/null || echo "–ú–æ–¥–µ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
}

# --- –ú–µ–Ω—é ---
animate_loading

CHOICE=$(whiptail --title "–ú–µ–Ω—é –¥—ñ–π" \
  --menu "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:" 20 60 10 \
  "1" "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–¥—É" \
  "2" "–ó–∞–ø—É—Å—Ç–∏—Ç–∏/–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–¥—É" \
  "3" "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ screen –Ω–æ–¥–∏" \
  "4" "–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" \
  "5" "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –º–æ–¥–µ–ª—ñ" \
  "6" "–û–Ω–æ–≤–∏—Ç–∏ –Ω–æ–¥—É" \
  "7" "–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–ª—å" \
  "8" "–í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–¥—É" \
  3>&1 1>&2 2>&3)

case $CHOICE in
  1) echo "–í–∏ –æ–±—Ä–∞–ª–∏: –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–¥—É"; download_node ;;
  2) echo "–í–∏ –æ–±—Ä–∞–ª–∏: –ó–∞–ø—É—Å—Ç–∏—Ç–∏/–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–¥—É"; launch_node ;;
  3) echo "–í–∏ –æ–±—Ä–∞–ª–∏: –ü–µ—Ä–µ–π—Ç–∏ –¥–æ screen –Ω–æ–¥–∏"; go_to_screen ;;
  4) echo "–í–∏ –æ–±—Ä–∞–ª–∏: –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"; userdata ;;
  5) echo "–í–∏ –æ–±—Ä–∞–ª–∏: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –º–æ–¥–µ–ª—ñ"; check_models ;;
  6) echo "–í–∏ –æ–±—Ä–∞–ª–∏: –û–Ω–æ–≤–∏—Ç–∏ –Ω–æ–¥—É"; update_node ;;
  7) echo "–í–∏ –æ–±—Ä–∞–ª–∏: –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–ª—å"; get_role_with_gswarm ;;
  8) echo "–í–∏ –æ–±—Ä–∞–ª–∏: –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ–¥—É"; delete_node ;;
  *) echo "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ." ;;
esac
